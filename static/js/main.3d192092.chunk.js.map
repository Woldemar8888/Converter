{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","startInput","setState","value","handleSelect","e","target","id","calculate","count","state","sum","from","to","toFixed","usd","eur","rub","byn","date","Date","toLocaleDateString","axios","get","then","data","filter","elem","Cur_Abbreviation","Cur_OfficialRate","className","this","type","onClick","onChange","toUpperCase","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAgFeA,E,YA1EL,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAyBXC,WAAW,WACR,EAAKC,SAAS,CAACC,MAAM,MA3BL,EA8BlBC,aAAa,SAACC,GACV,IAAIF,EAAQE,EAAEC,OAAOH,MACjBI,EAAKF,EAAEC,OAAOC,GAClB,EAAKL,SAAL,eAAgBK,EAAKJ,GAAQ,EAAKK,YAjCpB,EAqClBA,UAAU,SAACH,GACP,IAAII,EAEAA,EADDJ,GACUA,EAAEC,OAAOH,MAEZ,EAAKO,MAAMP,MACrB,IAAIQ,GAAO,EAAKD,MAAM,EAAKA,MAAME,MAAMH,EAAM,EAAKC,MAAM,EAAKA,MAAMG,KAAKC,QAAQ,GAChF,EAAKZ,SAAS,CAACC,MAAOM,EAAOE,SA1C7B,EAAKD,MAAO,CACRK,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,EACLN,KAAM,MACNC,GAAI,MACJV,MAAM,EACNQ,IAAK,EACLQ,MAAM,IAAIC,MAAOC,sBAXP,E,iFAeA,IAAD,OACfC,IACCC,IAAI,sDACJC,MAAK,SAAAC,GACF,IAAIV,EAAMU,EAAKA,KAAKC,QAAO,SAAAC,GAAI,MAA0B,QAAxBA,EAAKC,oBAA0B,GAAGC,iBAC/Db,EAAMS,EAAKA,KAAKC,QAAO,SAAAC,GAAI,MAA0B,QAAxBA,EAAKC,oBAA0B,GAAGC,iBAC/DZ,EAAMQ,EAAKA,KAAKC,QAAO,SAAAC,GAAI,MAA0B,QAAxBA,EAAKC,oBAA0B,GAAGC,iBACnE,EAAK3B,SAAS,CAACa,MAAKC,MAAKC,IAAKA,EAAI,W,+BA0BpC,OACE,yBAAKa,UAAU,OACX,8CAAoBC,KAAKrB,MAAMS,MAC/B,yBAAKW,UAAU,aACZ,2BAAOE,KAAK,SAASC,QAASF,KAAK9B,WAAYiC,SAAUH,KAAKvB,UAAYL,MAAO4B,KAAKrB,MAAMP,QAE/F,4BAAQI,GAAG,OAAO2B,SAAUH,KAAK3B,aAAcD,MAAO4B,KAAKrB,MAAME,MAC7D,4BAAQT,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,QAEJ,4BAAQI,GAAG,KAAK2B,SAAUH,KAAK3B,aAAcD,MAAO4B,KAAKrB,MAAMG,IAC3D,4BAAQV,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,QAEJ,2BAAyB,KAAnB4B,KAAKrB,MAAMP,MAAa,EAAI4B,KAAKrB,MAAMP,MAA7C,mBAAqE4B,KAAKrB,MAAME,KAAMuB,cAAtF,OAA6H,KAAnBJ,KAAKrB,MAAMP,MAAY,EAAG4B,KAAKrB,MAAMC,IAA/I,IAAsJoB,KAAKrB,MAAMG,GAAIsB,qB,GAnEvKC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.3d192092.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n\nclass App extends React.Component {\n          constructor(props){\n              super(props);\n              this.state ={\n                  usd: 2.05,\n                  eur: 2.26,\n                  rub: 0.033,\n                  byn: 1,\n                  from: 'byn',\n                  to: 'usd',\n                  value:0,\n                  sum: 0,\n                  date: new Date().toLocaleDateString()\n              }\n          }\n    \n        componentDidMount(){\n            axios\n            .get(\"http://www.nbrb.by/API/ExRates/Rates?Periodicity=0\")\n            .then(data=>{\n                let usd = data.data.filter(elem=>elem.Cur_Abbreviation==='USD')[0].Cur_OfficialRate;\n                let eur = data.data.filter(elem=>elem.Cur_Abbreviation==='EUR')[0].Cur_OfficialRate;\n                let rub = data.data.filter(elem=>elem.Cur_Abbreviation==='RUB')[0].Cur_OfficialRate;\n                this.setState({usd, eur, rub: rub/100 })\n            })\n        }\n            \n         startInput=()=>{\n            this.setState({value:''}) \n         }\n          \n          handleSelect=(e)=>{\n              let value = e.target.value;\n              let id = e.target.id;\n              this.setState({[id]: value}, this.calculate);\n        }\n          \n          \n          calculate=(e)=>{\n              let count;\n              if(e){\n                  count = +e.target.value;\n              } else\n                count = this.state.value;\n              let sum = (this.state[this.state.from]*count/this.state[this.state.to]).toFixed(2);\n              this.setState({value: count, sum });  \n          }\n                    \n          render(){\n              return (\n                <div className=\"App\">\n                    <h1>Exchange rates {this.state.date}</h1>\n                    <div className=\"converter\">\n                       <input type=\"number\" onClick={this.startInput} onChange={this.calculate}  value={this.state.value}  />\n                   \n                    <select id=\"from\" onChange={this.handleSelect} value={this.state.from}>\n                        <option value=\"usd\">USD</option>\n                        <option value=\"eur\">EUR</option>\n                        <option value=\"rub\">RUB</option>\n                        <option value=\"byn\">BYN</option>\n                    </select>\n                    <select id=\"to\" onChange={this.handleSelect} value={this.state.to}>\n                        <option value=\"usd\">USD</option>\n                        <option value=\"eur\">EUR</option>\n                        <option value=\"rub\">RUB</option>\n                        <option value=\"byn\">BYN</option>\n                    </select>\n                    <p>{  this.state.value==='' ? 0 : this.state.value}                {(this.state.from).toUpperCase()} is { this.state.value===''? 0 :this.state.sum} {(this.state.to).toUpperCase()} \n                    </p>\n                  </div>\n                </div>    \n              )\n          }\n      }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}